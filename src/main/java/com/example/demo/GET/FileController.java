package com.example.demo.GET;


import com.example.demo.OOP.Documents;
import com.example.demo.OOP.Person;
import com.example.demo.OOP.Posts;
import com.example.demo.service.FileStorageService;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.servlet.http.HttpSession;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;

@Slf4j
@RestController
@RequestMapping("/api/files")
public class FileController {

    @Autowired
    private FileStorageService fileStorageService;

    @PersistenceContext
    private EntityManager entityManager;

    @PostMapping("/upload")
    public ResponseEntity<String> uploadFile(@RequestParam("file") MultipartFile file,
                                             @RequestParam("documentTitle") String documentTitle,
                                             @RequestParam("postId") Long postId,
                                             HttpSession session) {
        try {
            if (file.isEmpty()) {
                log.error("‚ö†Ô∏è T·ªáp tr·ªëng.");
                return ResponseEntity.badRequest().body("‚ö†Ô∏è T·ªáp t·∫£i l√™n tr·ªëng.");
            }

            log.info("üì§ T·ªáp nh·∫≠n ƒë∆∞·ª£c: {} - K√≠ch th∆∞·ªõc: {} bytes", file.getOriginalFilename(), file.getSize());

            // L·∫•y ng∆∞·ªùi t·∫°o
            String teacherId = (String) session.getAttribute("TeacherID");
            if (teacherId == null) {
                log.error("üö´ Kh√¥ng t√¨m th·∫•y ID gi√°o vi√™n.");
                return ResponseEntity.badRequest().body("üö´ Kh√¥ng t√¨m th·∫•y ID gi√°o vi√™n.");
            }

            Person creator = entityManager.find(Person.class, teacherId);
            Posts post = entityManager.find(Posts.class, postId);

            if (creator == null || post == null) {
                log.error("‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi t·∫°o ho·∫∑c b√†i vi·∫øt.");
                return ResponseEntity.badRequest().body("‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi t·∫°o ho·∫∑c b√†i vi·∫øt.");
            }

            // Upload l√™n GCS
            String fileUrl = fileStorageService.uploadFile(file);
            log.info("üåê URL t·ªáp: {}", fileUrl);

            // T·∫°o ƒë·ªëi t∆∞·ª£ng Document
            Documents document = new Documents();
            document.setDocumentTitle(documentTitle);
            document.setCreator(creator);
            document.setPost(post);
            document.setFilePath(fileUrl);
            document.setFileData(file.getBytes());  // üåü L∆∞u d·ªØ li·ªáu

            log.info("üì• D·ªØ li·ªáu t·ªáp (bytes): {}", document.getFileData().length);

            entityManager.persist(document);
            entityManager.flush();

            log.info("‚úÖ ƒê√£ l∆∞u DocumentID: {}", document.getDocumentId());
            return ResponseEntity.ok("üìÑ T·ªáp t·∫£i l√™n th√†nh c√¥ng.");
        } catch (IOException e) {
            log.error("üö´ L·ªói ƒë·ªçc t·ªáp: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().body("‚ùå L·ªói ƒë·ªçc t·ªáp.");
        } catch (Exception e) {
            log.error("üö´ L·ªói h·ªá th·ªëng: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().body("‚ùå L·ªói h·ªá th·ªëng.");
        }
    }

    @GetMapping("/download/{documentId}")
    public ResponseEntity<ByteArrayResource> downloadFile(@PathVariable Long documentId) {
        Documents document = entityManager.find(Documents.class, documentId);

        if (document == null || document.getFileData() == null) {
            return ResponseEntity.notFound().build();
        }

        String contentType = determineContentType(document.getDocumentTitle());

        return ResponseEntity.ok()
                .contentType(MediaType.parseMediaType(contentType))
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + document.getDocumentTitle() + "\"")
                .body(new ByteArrayResource(document.getFileData()));
    }

    private String determineContentType(String fileName) {
        if (fileName.endsWith(".pdf")) {
            return "application/pdf";
        } else if (fileName.endsWith(".doc") || fileName.endsWith(".docx")) {
            return "application/msword";
        } else if (fileName.endsWith(".png")) {
            return "image/png";
        } else if (fileName.endsWith(".jpg") || fileName.endsWith(".jpeg")) {
            return "image/jpeg";
        } else {
            return "application/octet-stream";
        }
    }


    @DeleteMapping("/delete/{documentId}")
    @Transactional
    public ResponseEntity<String> deleteFile(@PathVariable Long documentId) {
        Documents document = entityManager.find(Documents.class, documentId);
        if (document == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("‚ùå Kh√¥ng t√¨m th·∫•y t√†i li·ªáu v·ªõi ID: " + documentId);
        }

        entityManager.remove(document);
        entityManager.flush();

        log.info("üóëÔ∏è ƒê√£ x√≥a t√†i li·ªáu v·ªõi ID: {}", documentId);
        return ResponseEntity.ok("‚úÖ T·ªáp ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.");
    }

    @GetMapping("/test")
    public ResponseEntity<String> testApi() {
        return ResponseEntity.ok("‚úÖ API ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng!");
    }
}
