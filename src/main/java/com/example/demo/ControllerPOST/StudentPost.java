package com.example.demo.ControllerPOST;

import com.example.demo.ModelOOP.*;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.servlet.http.HttpSession;
import jakarta.transaction.Transactional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.interceptor.TransactionAspectSupport;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.List;

@Controller
@RequestMapping("/")
@Transactional
public class StudentPost {
    private static final Logger log = LoggerFactory.getLogger(GiaoVienPost.class);
    @PersistenceContext
    private EntityManager entityManager;

    @PostMapping("/DangKyHocSinh")
    @Transactional(rollbackOn = Exception.class)
    public String dangKyHocSinh(
            @RequestParam("StudentID") String studentID,
            @RequestParam("FirstName") String firstName,
            @RequestParam("LastName") String lastName,
            @RequestParam("Email") String email,
            @RequestParam("PhoneNumber") String phoneNumber,
            @RequestParam("BirthDate") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate birthDate,
            @RequestParam(value = "MisId", required = false) String misId,
            @RequestParam("Password") String password,
            @RequestParam("ConfirmPassword") String confirmPassword,
            @RequestParam("Gender") Gender gender,
            @RequestParam(value = "Country", required = false) String country,
            @RequestParam(value = "Province", required = false) String province,
            @RequestParam(value = "District", required = false) String district,
            @RequestParam(value = "Ward", required = false) String ward,
            @RequestParam(value = "Street", required = false) String street,
            @RequestParam(value = "PostalCode", required = false) String postalCode,
            RedirectAttributes redirectAttributes) {

        System.out.println("B·∫Øt ƒë·∫ßu ƒëƒÉng k√Ω h·ªçc sinh...");

        // Ki·ªÉm tra m·∫≠t kh·∫©u kh·ªõp nhau
        if (!password.equals(confirmPassword)) {
            redirectAttributes.addFlashAttribute("errorPassword", "M·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng kh·ªõp!");
            return "redirect:/DangKyHocSinh";
        }

        // Ki·ªÉm tra StudentID ƒë√£ t·ªìn t·∫°i ch∆∞a
        if (entityManager.find(Person.class, studentID) != null) {
            redirectAttributes.addFlashAttribute("errorStudentID", "M√£ h·ªçc sinh ƒë√£ t·ªìn t·∫°i!");
            return "redirect:/DangKyHocSinh";
        }

        // Ki·ªÉm tra Email c√≥ t·ªìn t·∫°i ch∆∞a
        boolean emailExists = !entityManager.createQuery(
                        "SELECT s FROM Person s WHERE s.email = :email", Person.class)
                .setParameter("email", email)
                .getResultList().isEmpty();
        if (emailExists) {
            redirectAttributes.addFlashAttribute("errorEmail", "Email ƒë√£ t·ªìn t·∫°i!");
            return "redirect:/DangKyHocSinh";
        }

        // Ki·ªÉm tra ƒë·ªãnh d·∫°ng s·ªë ƒëi·ªán tho·∫°i
        if (!phoneNumber.matches("^[0-9]+$")) {
            redirectAttributes.addFlashAttribute("errorPhone", "S·ªë ƒëi·ªán tho·∫°i ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ s·ªë!");
            return "redirect:/DangKyHocSinh";
        } else if (!phoneNumber.matches("^\\d{9,10}$")) {
            redirectAttributes.addFlashAttribute("errorPhone", "S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 9-10 ch·ªØ s·ªë!");
            return "redirect:/DangKyHocSinh";
        }

        // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i c√≥ t·ªìn t·∫°i ch∆∞a
        boolean phoneExists = !entityManager.createQuery(
                        "SELECT s FROM Person s WHERE s.phoneNumber = :phoneNumber", Person.class)
                .setParameter("phoneNumber", phoneNumber)
                .getResultList().isEmpty();
        if (phoneExists) {
            redirectAttributes.addFlashAttribute("errorPhone", "S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω!");
            return "redirect:/DangKyHocSinh";
        }

        // Ki·ªÉm tra m·∫≠t kh·∫©u c√≥ ƒë·ªß m·∫°nh kh√¥ng
        if (!password.matches("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@#$%^&+=!]).{8,}$")) {
            redirectAttributes.addFlashAttribute("errorPassword", "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±, bao g·ªìm ch·ªØ hoa, ch·ªØ th∆∞·ªùng, s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát!");
            return "redirect:/DangKyHocSinh";
        }

        // Ki·ªÉm tra ng√†y sinh c√≥ h·ª£p l·ªá kh√¥ng (ph·∫£i trong qu√° kh·ª©)
        LocalDate today = LocalDate.now();
        if (birthDate.isAfter(today)) {
            redirectAttributes.addFlashAttribute("errorBirthDate", "Ng√†y sinh kh√¥ng h·ª£p l·ªá!");
            return "redirect:/DangKyHocSinh";
        }

        // Ki·ªÉm tra ƒë·ªô tu·ªïi h·ª£p l·ªá (√≠t nh·∫•t 6 tu·ªïi)
        if (ChronoUnit.YEARS.between(birthDate, today) < 6) {
            redirectAttributes.addFlashAttribute("errorBirthDate", "H·ªçc sinh ph·∫£i t·ª´ 6 tu·ªïi tr·ªü l√™n!");
            return "redirect:/DangKyHocSinh";
        }

        // L·∫•y Admin
        List<Admin> adminList = entityManager.createQuery("FROM Admin", Admin.class).getResultList();
        if (adminList.isEmpty()) {
            redirectAttributes.addFlashAttribute("errorAdmin", "Kh√¥ng t√¨m th·∫•y Admin!");
            return "redirect:/DangKyHocSinh";
        }
        Admin admin = adminList.get(0);

        // T√¨m nh√¢n vi√™n c√≥ √≠t h·ªçc sinh nh·∫•t
        Employees selectedEmployee = findEmployeeWithFewestStudents();
        if (selectedEmployee == null) {
            redirectAttributes.addFlashAttribute("errorEmployee", "Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n n√†o ƒë·ªÉ ph√¢n b·ªï!");
            return "redirect:/DangKyHocSinh";
        }

        // T·∫°o ƒë·ªëi t∆∞·ª£ng h·ªçc sinh
        Students student = new Students();
        student.setId(studentID);
        student.setFirstName(firstName);
        student.setLastName(lastName);
        student.setEmail(email);
        student.setPhoneNumber(phoneNumber);
        student.setBirthDate(birthDate);
        student.setMisId(misId);
        student.setPassword(password); // M√£ h√≥a m·∫≠t kh·∫©u
        student.setGender(gender);
        student.setCountry(country); // L∆∞u qu·ªëc gia
        student.setProvince(province); // L∆∞u t·ªânh/th√†nh ph·ªë
        student.setDistrict(district); // L∆∞u qu·∫≠n/huy·ªán
        student.setWard(ward); // L∆∞u x√£/ph∆∞·ªùng
        student.setStreet(street); // L∆∞u ƒë∆∞·ªùng, s·ªë nh√†
        student.setPostalCode(postalCode); // L∆∞u m√£ b∆∞u ƒëi·ªán
        student.setEmployee(selectedEmployee);
        student.setAdmin(admin);

        // L∆∞u v√†o database
        try {
            entityManager.persist(student);
            System.out.println("ƒêƒÉng k√Ω h·ªçc sinh th√†nh c√¥ng! G√°n cho nh√¢n vi√™n: " + selectedEmployee.getId());
        } catch (Exception e) {
            System.out.println("L·ªói khi l∆∞u h·ªçc sinh: " + e.getMessage());
            redirectAttributes.addFlashAttribute("error", "L·ªói khi l∆∞u d·ªØ li·ªáu: " + e.getMessage());
            return "redirect:/DangKyHocSinh";
        }

        redirectAttributes.addFlashAttribute("successMessage", "ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p.");
        return "redirect:/TrangChu";
    }

    // Ph∆∞∆°ng th·ª©c ph·ª• ƒë·ªÉ t√¨m nh√¢n vi√™n c√≥ √≠t h·ªçc sinh nh·∫•t
    private Employees findEmployeeWithFewestStudents() {
        // L·∫•y t·∫•t c·∫£ nh√¢n vi√™n
        List<Employees> employeesList = entityManager.createQuery("FROM Employees", Employees.class).getResultList();
        if (employeesList.isEmpty()) {
            return null;
        }

        Employees selectedEmployee = null;
        Long minStudentCount = Long.MAX_VALUE;

        // Duy·ªát qua t·ª´ng nh√¢n vi√™n v√† ƒë·∫øm s·ªë h·ªçc sinh h·ªç qu·∫£n l√Ω
        for (Employees employee : employeesList) {
            Long studentCount = entityManager.createQuery(
                            "SELECT COUNT(s) FROM Students s WHERE s.employee = :employee", Long.class)
                    .setParameter("employee", employee)
                    .getSingleResult();

            if (studentCount < minStudentCount) {
                minStudentCount = studentCount;
                selectedEmployee = employee;
            }
        }

        return selectedEmployee;
    }

    @PostMapping("/GuiNhanXetGiaoVien")
    @Transactional
    public String guiNhanXetGiaoVien(@RequestParam("teacherId") Long teacherId,
                                     @RequestParam("roomId") String roomId,
                                     @RequestParam("text") String text,
                                     HttpSession session,
                                     RedirectAttributes redirectAttributes) {
        try {
            log.info("üìù Nh·∫≠n x√©t gi√°o vi√™n v·ªõi ID: {}, ph√≤ng h·ªçc: {}", teacherId, roomId);

            // L·∫•y ID h·ªçc sinh t·ª´ phi√™n ƒëƒÉng nh·∫≠p
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            String studentId = authentication.getName();

            // Ki·ªÉm tra n·∫øu sinh vi√™n ch∆∞a ƒëƒÉng nh·∫≠p
            if (studentId == null || studentId.isEmpty()) {
                throw new IllegalArgumentException("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!");
            }

            // T√¨m sinh vi√™n trong database
            Students student = entityManager.find(Students.class, studentId);
            if (student == null) {
                throw new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y h·ªçc sinh v·ªõi ID: " + studentId);
            }

            // T√¨m gi√°o vi√™n
            Teachers teacher = entityManager.find(Teachers.class, teacherId);
            if (teacher == null) {
                throw new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y gi√°o vi√™n v·ªõi ID: " + teacherId);
            }

            // T√¨m ph√≤ng h·ªçc
            Room room = entityManager.find(Room.class, roomId);
            if (room == null) {
                throw new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y ph√≤ng h·ªçc v·ªõi ID: " + roomId);
            }

            // L·∫•y nh√¢n vi√™n nh·∫≠n ph·∫£n h·ªìi (n·∫øu c√≥)
            Employees receiver = student.getEmployee(); // Ho·∫∑c entityManager.find(Employees.class, someId);

            // T·∫°o nh·∫≠n x√©t m·ªõi
            Feedbacks feedback = new Feedbacks();
            feedback.setReviewer(student);
            feedback.setTeacher(teacher);
            feedback.setReceiver(receiver);
            feedback.setText(text.trim());
            feedback.setRoom(room);
            feedback.setCreatedAt(LocalDateTime.now());

            // X√°c ƒë·ªãnh s·ª± ki·ªán ph·∫£n h·ªìi
            Events events = entityManager.find(Events.class, 3);
            feedback.setEvent(events);

            // L∆∞u nh·∫≠n x√©t v√†o database
            entityManager.persist(feedback);
            log.info("‚úÖ Nh·∫≠n x√©t ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng.");

            // G·ª≠i th√¥ng b√°o v·ªÅ giao di·ªán
            redirectAttributes.addFlashAttribute("message", "Nh·∫≠n x√©t c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i!");

        } catch (IllegalArgumentException e) {
            log.warn("‚ö†Ô∏è L·ªói ki·ªÉm tra d·ªØ li·ªáu: {}", e.getMessage());
            redirectAttributes.addFlashAttribute("error", e.getMessage());
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();

        } catch (Exception e) {
            log.error("‚ùå L·ªói khi g·ª≠i nh·∫≠n x√©t: {}", e.getMessage(), e);
            redirectAttributes.addFlashAttribute("error", "C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i.");
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
        }
        return "redirect:/TrangChuHocSinh";
    }
}
